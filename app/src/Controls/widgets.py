# This file is for the tailor-made widgets for controls including OPTIONS dropdown, addon function for generating a dict for the combined input of payment arrangement.
from dash import Dash
from distutils.log import debug
from re import A, S
from dash import dcc, html, Input, Output, State, callback_context, MATCH, ALL, ALLSMALLER, Patch, callback
from dash.exceptions import PreventUpdate
import dash_bootstrap_components as dbc
import dash_mantine_components as dmc
from dash_iconify import DashIconify

from app.src.toolkit import to_dropdown_options, suffix_for_type
from app.assets.ids import *
from app.src import amortization_types
import json


# Addons function for the payment arrangement.
# For further information, please refer to the documentation of the addon function in the file Amort\test\ADDON.py.
# code of the color: https://useaxentix.com/docs/general/colors/

# addon inputs function.
def addon(
        # Type need to be indicated within ['prepay', 'subsidy'] to distinguish the different dropdowns.
        type: str,
        # placeholder: str,
        disabled: bool = False,
        index= "",
        input_type= 'float', # ['float', 'number']
):
    """
    The addon function is used to generate a dict for the combined input of payment arrangement.
    The "suffix_for_type()" function is imported from the toolkit module to make format of the id match the type which specified in the argument, to distinguish the different dropdowns.

    Note that the there is no an argument for the dropdown list. It is needed to be generated by the callback function, 
    of which the id of the output is 'suffix_for_type(ADDON.DROPDOWN.LIST, type)' if the argument of the pattern_matching is off, 
    otherwise the id of the output is '{'index': type, 'type': suffix_for_type(ADDON.DROPDOWN.LIST, type)}' if the argument of the pattern_matching is on.

    For example, the following codes show the callback function for the dropdown list while the pattern_matching is on:

    @callback(
        Output({'index': ALL, 'type': suffix_for_type(ADDON.DROPDOWN.LIST, type)}, 'data'),
        Input(suffix_for_type(LOAN.TERM), 'value'),
    )
    def update_dropdown_list(term: int):
        return term

    """

    layout = html.Div(
        [
            dcc.Store(id={"index": index, "type": suffix_for_type(ADDON.DROPDOWN.LIST, type)},
                      data=0
                      ),
            dcc.Store(id={"index": index, "type": suffix_for_type(ADDON.DISABLED, type)}, data=disabled),
            # That's the outcome what we want.
            dcc.Store(id={"index": index, "type": suffix_for_type(ADDON.MEMORY, type)}, data={}),
            html.Div(
                children= [
                    dmc.Select(
                                data= [],
                                id={"index": index, "type": suffix_for_type(ADDON.DROPDOWN.MENU, type)},
                                disabled=disabled,
                                # size= 'md',
                                style= {
                                    'width': '35%',
                                    # 'display': 'inline'
                                },
                                clearable= True,
                                placeholder= 'Time',
                    ),
                    dmc.NumberInput(
                       id= {"index": index, "type": suffix_for_type(ADDON.INPUT, type)},
                       style={
                           "width": '50%',
                            # 'display': 'inline',
                           },
                       value= 0,
                    #    size= 'md',
                       step= (0.01 if input_type == 'float' else 1),
                       min= 0,
                       max= (100 if input_type == 'float' else None),
                       precision= (2 if input_type == 'float' else 0),
                       hideControls= (False if input_type == 'float' else True),
                       type= ('float' if input_type == 'float' else 'number'),
                    ),
                    dmc.ButtonGroup(
                        [
                            dmc.Button(
                                id={"index": index, "type": suffix_for_type(ADDON.ADD, type)},
                                variant= 'gradient',
                                gradient={"from": "indigo", "to": "cyan"},
                                children= DashIconify(
                                    icon= 'icon-park-twotone:add',
                                ),
                                disabled= disabled,
                                # size= 'md',
                            ),
                            dmc.Button(
                                id={"index": index, "type": suffix_for_type(ADDON.DELETE, type)},
                                variant= 'gradient',
                                gradient={"from": "grape", "to": "pink", "deg": 35},
                                children= DashIconify(icon= 'tabler:trash'),
                                disabled= disabled,
                                # size= 'md',
                            )
                        ],
                    )
                ],
                style= {
                    # 'width': '100%',
                    'display': 'flex',
                },
            ),

            dbc.Collapse(
                id= {"index": index, "type": suffix_for_type(ADDON.COLLAPSE, type)},
                children=[
                    dbc.Card(
                        children= [dbc.CardBody(id= {"index": index, "type": suffix_for_type(ADDON.NEW, type)})],
                        style= {
                            'width': '100%',
                            'height': '150px',
                            # 'radius': '10px',
                            # 'borderRadius': '10px',
                        },
                        className= 'custom-scrollbar',
                    )
                ],
                is_open=False,
                style= {
                    'width': '100%',
                },
            ),
        ],
    )


# ##1 Control the disabled status of the input and the add button.
#     @callback(
#         Output({"index": MATCH, "type": suffix_for_type(ADDON.INPUT, type)}, 'disabled', allow_duplicate= True),
#         Output({"index": MATCH, "type": suffix_for_type(ADDON.DROPDOWN.MENU, type)}, 'disabled', allow_duplicate= True),
#         Output({"index": MATCH, "type": suffix_for_type(ADDON.ADD, type)}, 'disabled', allow_duplicate= True),
#         Output({"index": MATCH, "type": suffix_for_type(ADDON.DELETE, type)}, 'disabled', allow_duplicate= True),
#         Input({"index": MATCH, "type": suffix_for_type(ADDON.DISABLED, type)}, 'data'),
#         prevent_initial_call=True
#     )
#     def control_disabled(disabled):
#         return disabled, disabled, disabled, disabled

##2 update the data in dmc.Select
    @callback(
        Output({"index": MATCH, "type": suffix_for_type(ADDON.DROPDOWN.MENU, type)}, 'data'),
        Input({"index": MATCH, "type": suffix_for_type(ADDON.MEMORY, type)}, 'data'),
        Input({"index": MATCH, "type": suffix_for_type(ADDON.DROPDOWN.MENU, type)}, 'value'),
        Input({"index": MATCH, "type": suffix_for_type(ADDON.DROPDOWN.LIST, type)}, 'data'),
    )
    def update_Select_list(
        memory,
        _,
        lst
    ):
        patched_items = Patch()
        if lst and len(lst[-1]) > 0:
            registered = [element for element in range(int(lst[-1][0]), int(lst[-1][-1]) + 1)]
        else:
            registered = []
        patched_items= [{"value": registered_item, "label": f"{registered_item}"} for registered_item in registered if str(registered_item) not in memory]
        return patched_items
    
##4 callback for add button.
    @callback(
        [
            Output({"index": MATCH, "type": suffix_for_type(ADDON.NEW, type)}, 'children', allow_duplicate= True),
            Output({"index": MATCH, "type": suffix_for_type(ADDON.INPUT, type)}, 'value', allow_duplicate= True),
            Output({"index": MATCH, "type": suffix_for_type(ADDON.DROPDOWN.MENU, type)}, 'value', allow_duplicate= True),
            Output({"index": MATCH, "type": suffix_for_type(ADDON.MEMORY, type)}, 'data', allow_duplicate= True),
        ],
        Input({"index": MATCH, "type": suffix_for_type(ADDON.ADD, type)}, 'n_clicks'),
        [
            State({"index": MATCH, "type": suffix_for_type(ADDON.DROPDOWN.MENU, type)}, 'value'),
            State({"index": MATCH, "type": suffix_for_type(ADDON.INPUT, type)}, 'value'),
            State({"index": MATCH, "type": suffix_for_type(ADDON.MEMORY, type)}, 'data'),
        ],
        prevent_initial_call=True
    )
    def add_items(
        _,
        selected_time,
        current_input,
        memory,
    ):
        patched_item = Patch()
        if selected_time and current_input:
            memory[str(selected_time)] = float(current_input)
            sorted_memory= {}
            for k in [str(sorted_key) for sorted_key in sorted([int(key) for key in [v for v in memory.keys()]])]: 
                sorted_memory[k]= memory[k]
            patched_item= [new_checklist_item(_, type= type, result= {k: v}) for (k, v) in sorted_memory.items()]
            return patched_item, 0, 0, memory
        else:
            raise PreventUpdate
        
    # mark the done items
    @callback(
        Output({"index": MATCH, "type": suffix_for_type('done', type)}, "styles"),
        Input({"index": MATCH, "type": suffix_for_type('done', type)}, "checked"),
    )
    def mark_done(state):
        if state:
            styles = {
                'label': {
                    'fontSize': 18,
                    'text-decoration': 'line-through',
                    'text-decoration-color': '#888',
                    'color': '#888',
                },
            }
            return styles#[styles if do else {'label': {'fontSize': 18}} for do in state]
        else:
            raise PreventUpdate

##5 callback for delete button
    @callback(
        Output({"index": index, "type": suffix_for_type(ADDON.NEW, type)}, 'children', allow_duplicate= True),
        Output({"index": index, "type": suffix_for_type(ADDON.MEMORY, type)}, 'data'),
        Input({"index": index, "type": suffix_for_type(ADDON.DELETE, type)}, 'n_clicks'),
        State({'index': ALL, 'type': suffix_for_type('done', type)}, 'checked'),
        State({"index": index, "type": suffix_for_type(ADDON.MEMORY, type)}, 'data'),
        prevent_initial_call=True
    )
    def delete_items(
        _, 
        state, 
        memory, 
        ):
        values_to_remove = []
        patched_item = Patch()
        if memory:
            for i, value in enumerate([s for s in state if s]): # Errors occurred when multiple components were deployed and "None" were added in the state list. To address this problem, I filtered the state list to remove all instances of "None" and only kept the instances of "done".  
                if value:
                    values_to_remove.insert(0, i)
            for i in values_to_remove:
                del patched_item[i]
                # remove corresponding items from the memory.
                del memory[list(memory.keys())[i]]
            return patched_item, memory
        else:
            raise PreventUpdate
        
##6 collapse
    @callback(
        Output({"index": index, "type": suffix_for_type(ADDON.COLLAPSE, type)}, 'is_open'),
        Input({"index": index, "type": suffix_for_type(ADDON.MEMORY, type)}, 'data'),
    )
    def update_collapse(data):
        if len(data) == 0:
            return False
        else:
            return True

    return layout


def new_checklist_item(triggered_index, type, result):
    return html.Div(
        [
            dmc.Checkbox(
                id={"index": triggered_index, "type": suffix_for_type('done', type)}, 
                label= "Apply {} from the {}{}".format(
                     [*result.values()][-1], 
                     [*result][-1], 
                     ('st' if c == "1" else ('nd' if c == "2" else ('rd' if c == "3" else 'th'))
                     ) 
                     if len(c := [*result.keys()][-1]) == 1 
                     else ('st' if c[-1] == '1' else ('nd' if c[-1] == '2' else ('rd' if c[-1] == '3' else 'th')))
                ),
                style= {
                    'display': 'inline-block',
                },
                styles= {
                    'label': {
                        'fontSize': 18,
                    },
                },
                size= 'sm',
                # mb=10
            ),
        ],
        style={
            'display': 'inline-block',
        }
    )


# build a refeshable dropdown that can refresh the options when the refresh button is clicked.
def refreshable_dropdown(
        label: str,
        # ['prepay', 'subsidy'] Consider the case of duplicate ids.
        type: str = 'prepay',
        placeholder: str = 'Choose methods of the payment',
        value: list = [*amortization_types],
        options: dict = amortization_types,
        disabled: bool = False,
        index= "",
        width= 280,
        **kwargs
):
    """
    There are two dropdown components in the layout: one for the payment options and the other for refreshing the options accordingly. 
    Note that since there are two kinds of types, 'prepay' and 'subsidy', 
    the IDs of the components are formatted as {'index': type, 'type': original ID of the component} in order to separate the types within the layout.
    """
    dropdown = html.Div(
        [
            html.Div(
                [
                    dmc.MultiSelect(
                        label="Repayment methods",
                        id={"index": index, "type": suffix_for_type(ADVANCED.DROPDOWN.OPTIONS, type)},
                        placeholder="Select method for repayment",
                        value= value,
                        data=[*options],
                        size= 'sm',
                        style={
                            # "width": '100%', 
                            "marginBottom": 5,
                        },
                    ),
                    dmc.Button(
                        children="Refresh",
                        id={"index": index, "type": suffix_for_type(ADVANCED.DROPDOWN.BUTTON, type)},
                        variant="gradient",
                        gradient={"from": "teal", "to": "blue", "deg": 60},
                        n_clicks= 0,
                    ),
                ],
            ),
        ],
    )

    # Refresh the Dropdown of the Payment options
    @callback(
        Output({"index": index, "type": suffix_for_type(ADVANCED.DROPDOWN.OPTIONS, type)}, 'value'),
        Input({"index": index, "type": suffix_for_type(ADVANCED.DROPDOWN.BUTTON, type)}, 'n_clicks'),
    )
    def refresh_options(_: int):
        if _> 0:
            return [*options]
        else:
            raise PreventUpdate
    return dropdown


# py -m app.Dashboard.pages.components.Controls.widgets
if __name__ == "__main__":
    from .components import MortgageOptions
    from .panels import panel  
    app = Dash(
        __name__, 
        external_stylesheets=[
            dbc.themes.LUMEN, 
            dbc.icons.BOOTSTRAP
        ], 
        suppress_callback_exceptions=True,
        # assets_external_path= 'app/Dashboard/assets',
        )
    c= MortgageOptions()
    c.index= 'test'
    c.type= 'prepay'
    app.layout = html.Div(
        [
            panel.register(),
            refreshable_dropdown(
                label='Test for refreshable dropdown'),
            html.Hr(),
            html.H6('Test for addon'),
            c.tenure(),
            addon(
                type= 'prepay',
                index= 'test',
            )
        ]
    )
    @callback(
            Output({'index': 'test', 'type': suffix_for_type(ADDON.DROPDOWN.LIST, 'prepay')}, 'data'), 
            Input(LOAN.RESULT.KWARGS, 'data'),
    )
    def update_arrangement(memory):
        return [[1, memory['tenure'] - 1]]
    app.run_server(
        debug=True
        )
